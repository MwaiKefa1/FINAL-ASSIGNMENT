-- Create database for Library Management System
CREATE DATABASE LibraryDB;
USE LibraryDB;

-- Table to store Authors
CREATE TABLE Authors (
    author_id INT AUTO_INCREMENT PRIMARY KEY,  -- Unique author identifier
    first_name VARCHAR(100) NOT NULL,           -- Author's first name
    last_name VARCHAR(100) NOT NULL,            -- Author's last name
    dob DATE NOT NULL,                          -- Date of birth of author
    UNIQUE(first_name, last_name)               -- Ensures no duplicate author names
);

-- Table to store Books
CREATE TABLE Books (
    book_id INT AUTO_INCREMENT PRIMARY KEY,  -- Unique book identifier
    title VARCHAR(255) NOT NULL,              -- Book title
    genre VARCHAR(100) NOT NULL,              -- Genre of the book
    published_year INT NOT NULL,              -- Year the book was published
    isbn VARCHAR(20) NOT NULL,                -- ISBN number
    available_copies INT NOT NULL DEFAULT 0,  -- Number of available copies for borrowing
    UNIQUE(isbn)                              -- Ensures each book has a unique ISBN
);

-- Table to store Library Members
CREATE TABLE Members (
    member_id INT AUTO_INCREMENT PRIMARY KEY, -- Unique member identifier
    first_name VARCHAR(100) NOT NULL,         -- Member's first name
    last_name VARCHAR(100) NOT NULL,          -- Member's last name
    email VARCHAR(100) NOT NULL UNIQUE,       -- Email address of the member
    phone_number VARCHAR(15) NOT NULL,        -- Phone number of the member
    join_date DATE NOT NULL                   -- Date when the member joined
);

-- Table to store Borrowing records (many-to-many relationship between Books and Members)
CREATE TABLE Borrowing (
    borrow_id INT AUTO_INCREMENT PRIMARY KEY,  -- Unique borrowing record identifier
    book_id INT NOT NULL,                      -- Foreign Key referencing Books table
    member_id INT NOT NULL,                    -- Foreign Key referencing Members table
    borrow_date DATE NOT NULL,                 -- Date the book was borrowed
    return_date DATE,                          -- Date the book was returned (null if not returned)
    FOREIGN KEY (book_id) REFERENCES Books(book_id) ON DELETE CASCADE,  -- Foreign key constraint for Books
    FOREIGN KEY (member_id) REFERENCES Members(member_id) ON DELETE CASCADE,  -- Foreign key constraint for Members
    CONSTRAINT book_member_unique UNIQUE (book_id, member_id, borrow_date)  -- Ensures a book can only be borrowed once by a member on a specific date
);

-- Many-to-Many relationship between Books and Authors
CREATE TABLE BookAuthors (
    book_id INT NOT NULL,                     -- Foreign Key referencing Books table
    author_id INT NOT NULL,                   -- Foreign Key referencing Authors table
    PRIMARY KEY (book_id, author_id),         -- Composite primary key
    FOREIGN KEY (book_id) REFERENCES Books(book_id) ON DELETE CASCADE,  -- Foreign key constraint for Books
    FOREIGN KEY (author_id) REFERENCES Authors(author_id) ON DELETE CASCADE  -- Foreign key constraint for Authors
);

-- Sample data insertions (optional but useful for testing)
-- Inserting authors
INSERT INTO Authors (first_name, last_name, dob) VALUES 
('George', 'Orwell', '1903-06-25'),
('J.K.', 'Rowling', '1965-07-31');

-- Inserting books
INSERT INTO Books (title, genre, published_year, isbn, available_copies) VALUES 
('1984', 'Dystopian', 1949, '978-0451524935', 10),
('Harry Potter and the Philosopher\'s Stone', 'Fantasy', 1997, '978-0747532743', 5);

-- Inserting members
INSERT INTO Members (first_name, last_name, email, phone_number, join_date) VALUES 
('Alice', 'Smith', 'alice.smith@example.com', '123-456-7890', '2023-01-10'),
('Bob', 'Johnson', 'bob.johnson@example.com', '987-654-3210', '2024-03-20');

-- Inserting borrowing records
INSERT INTO Borrowing (book_id, member_id, borrow_date, return_date) VALUES 
(1, 1, '2025-05-01', NULL),  -- Alice borrowed '1984' and hasn't returned it yet
(2, 2, '2025-05-10', NULL);  -- Bob borrowed 'Harry Potter' and hasn't returned it yet

-- Inserting book-author relationships
INSERT INTO BookAuthors (book_id, author_id) VALUES 
(1, 1),  -- '1984' by George Orwell
(2, 2);  -- 'Harry Potter' by J.K. Rowling

